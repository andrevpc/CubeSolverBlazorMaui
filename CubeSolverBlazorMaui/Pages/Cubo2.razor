@using System.Linq;

@page "/cubo2"

<h3>2x2</h3>
<p>@(CheckColorsError(Sides))</p>
<p>@(Translate(Sides[0].pecas[0]))</p>
<button @onclick="Solve">Solve</button>

<div>
    <div class="date-grid" style="margin-left: 252px">
        @for (int i = 0, j = 0; i < 2; i++, j += 2)
        {
            <div class="smallHolder">
                @for (int k = 0; k < 2; k++)
                {
                    <Square Color="this.Sides[0].pecas[j+k]" Position="(0, j+k)" ClickCallback="handleSquareClick" /> 
                }
            </div>
        }
    </div>

    <div style="display:flex; margin: 2px">
        <div class="date-grid">
            @for (int i = 0, j = 0; i < 2; i++, j += 2)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 2; k++)
                    {
                        <Square Color="this.Sides[1].pecas[j+k]" Position="(1, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>

        <div class="date-grid">
            @for (int i = 0, j = 0; i < 2; i++, j += 2)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 2; k++)
                    {
                        <Square Color="this.Sides[2].pecas[j+k]" Position="(2, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>

        <div class="date-grid">
            @for (int i = 0, j = 0; i < 2; i++, j += 2)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 2; k++)
                    {
                        <Square Color="this.Sides[3].pecas[j+k]" Position="(3, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>
        <div class="date-grid">
            @for (int i = 0, j = 0; i < 2; i++, j += 2)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 2; k++)
                    {
                        <Square Color="this.Sides[4].pecas[j+k]" Position="(4, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>
    </div>
    <div class="date-grid" style="margin-left: 252px">
        @for (int i = 0, j = 0; i < 2; i++, j += 2)
        {
            <div class="smallHolder">
                @for (int k = 0; k < 2; k++)
                {
                    <Square Color="this.Sides[5].pecas[j+k]" Position="(5, j+k)" ClickCallback="handleSquareClick" />
                }
            </div>
        }
    </div>
</div>

@code {

    private Side[] Sides { get; set; } = new Side[6];

    public byte[] numBytes { get; set; } = { 82, 66, 87, 71, 89, 79 };

    private bool CheckColorsError(params Side[] sides) => sides
        .SelectMany(side => side.pecas)
        .GroupBy(cor => cor)
        .Select(group => group.Count())
        .Any(count => count != 4);

    private void Solve()
    {
        
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (Cor c in Enum.GetValues(typeof(Cor)))
        {
            Sides[(int)c] = new Side(c);
        }
    }

    private void handleSquareClick((Cor color, int side, int piece) squareInfo)
    {
        this.Sides[squareInfo.side].pecas[squareInfo.piece] = squareInfo.color;
    }

    private void OnClick(int lado, int peca)
    {
        this.Sides[lado].pecas[peca] =
            (int)this.Sides[lado].pecas[peca] > 4 ?
            Cor.Red : (Cor)((int)this.Sides[lado].pecas[peca] + 1);
    }

    private class Side
    {
        public Cor[] pecas { get; set; } = new Cor[4];

        public Side(Cor cor)
        {
            for (int i = 0; i < pecas.Length; i++)
                pecas[i] = cor;
        }
    }

    public byte Translate(Cor cor) => numBytes[(int)cor];
}

