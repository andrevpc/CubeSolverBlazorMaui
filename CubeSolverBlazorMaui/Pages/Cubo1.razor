@using System.Linq;
@using CubeSolverBlazorMaui.CubeSolver;
@page "/cubo"



<div class="divH" style="margin-bottom:0">
    <div class="top-row px-4" style="font-weight:600; ">
        <ul class="nav justify-content-center">
            <li class="nav-item">
                <a class="nav-link active" href="/">Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/">|</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/cubo2">2x2</a>
            </li>
        </ul>
    </div>
    <img class="logo" src="./image/logoV2.png">
</div>




@*@onclick="Solve" *@
<div>

    <div class="date-grid" style="margin-left: 252px">
        @for (int i = 0, j = 0; i < 3; i++, j += 3)
        {
            <div class="smallHolder">
                @for (int k = 0; k < 3; k++)
                {
                    <Square Color="this.Sides[0].pecas[j+k]" Position="(0, j+k)" ClickCallback="handleSquareClick" />
                }
            </div>
        }
    </div>

    <div style="display:flex; margin: 2px">
        <div class="date-grid">
            @for (int i = 0, j = 0; i < 3; i++, j += 3)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 3; k++)
                    {
                        <Square Color="this.Sides[1].pecas[j+k]" Position="(1, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>

        <div class="date-grid">
            @for (int i = 0, j = 0; i < 3; i++, j += 3)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 3; k++)
                    {
                        <Square Color="this.Sides[2].pecas[j+k]" Position="(2, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>

        <div class="date-grid">
            @for (int i = 0, j = 0; i < 3; i++, j += 3)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 3; k++)
                    {
                        <Square Color="this.Sides[3].pecas[j+k]" Position="(3, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>
        <div class="date-grid">
            @for (int i = 0, j = 0; i < 3; i++, j += 3)
            {
                <div class="smallHolder">
                    @for (int k = 0; k < 3; k++)
                    {
                        <Square Color="this.Sides[4].pecas[j+k]" Position="(4, j+k)" ClickCallback="handleSquareClick" />
                    }
                </div>
            }
        </div>
    </div>
    <div class="date-grid" style="margin-left: 252px">
        @for (int i = 0, j = 0; i < 3; i++, j += 3)
        {
            <div class="smallHolder">
                @for (int k = 0; k < 3; k++)
                {
                    <Square Color="this.Sides[5].pecas[j+k]" Position="(5, j+k)" ClickCallback="handleSquareClick" />
                }
            </div>
        }
    </div>


    <button @onclick="Solve" disabled="@(CheckColorsError(Sides))">
        Solve
    </button>
    <p>@result</p>
</div>

@code {

    private Side[] Sides { get; set; } = new Side[6];
    string result = "teste";
    public byte[] numBytes { get; set; } = { 82, 66, 87, 71, 89, 79 };

    private bool CheckColorsError(params Side[] sides) => sides
        .SelectMany(side => side.pecas)
        .GroupBy(cor => cor)
        .Select(group => group.Count())
        .Any(count => count != 9);

    public void Solve()
    {
        byte[] cores0 = new byte[9];
        byte[] cores1 = new byte[9];
        byte[] cores2 = new byte[9];
        byte[] cores3 = new byte[9];
        byte[] cores4 = new byte[9];
        byte[] cores5 = new byte[9];


        var a = Sides
        .SelectMany(x => x.pecas)
        .Select(x => Translate(x))
        .ToArray();

        for (int i = 0; i < a.Count(); i++)
        {
            if (i <= 8)
                cores0[i] = a[i];
            else if (i <= 17)
                cores1[i - 9] = a[i];
            else if (i <= 26)
                cores2[i - 18] = a[i];
            else if (i <= 35)
                cores3[i - 27] = a[i];
            else if (i <= 44)
                cores4[i - 36] = a[i];
            else if (i <= 53)
                cores5[i - 45] = a[i];
        }

        List<byte[]> cores = new List<byte[]>() { cores2, cores3, cores4, cores1, cores0, cores5 };

        //result = cores2[0].ToString();

        Cubo cubinho = new Cubo();

        for (int i = 0; i < 6; i++)
        {
            Face facezinha = new Face(cores[i]);
            cubinho.addFace(facezinha, i);
        }
        //
        Solver solucao = new Solver(cubinho);
        result = solucao.Cross() + solucao.FirstCorners() + solucao.CenterEdges() + solucao.TopCross() + solucao.TopCorners() + solucao.PLL1() + solucao.Minerva();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (Cor c in Enum.GetValues(typeof(Cor)))
        {
            Sides[(int)c] = new Side(c);
        }
    }

    private void handleSquareClick((Cor color, int side, int piece) squareInfo)
    {
        this.Sides[squareInfo.side].pecas[squareInfo.piece] = squareInfo.color;
    }

    private void OnClick(int lado, int peca)
    {
        this.Sides[lado].pecas[peca] =
            (int)this.Sides[lado].pecas[peca] > 4 ?
            Cor.Red : (Cor)((int)this.Sides[lado].pecas[peca] + 1);
    }

    private class Side
    {
        public Cor[] pecas { get; set; } = new Cor[9];

        public Side(Cor cor)
        {
            for (int i = 0; i < pecas.Length; i++)
                pecas[i] = cor;
        }
    }

    public byte Translate(Cor cor) => numBytes[(int)cor];

}
